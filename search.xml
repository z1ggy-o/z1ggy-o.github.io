<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java Generic 小记</title>
      <link href="/2019/02/27/java-generic/"/>
      <url>/2019/02/27/java-generic/</url>
      
        <content type="html"><![CDATA[<p>以前没有好好看过 Java， Generic 也是随便看了下就拿来用， 好多地方都不明白。 今天花时间看了下， 解决了一些自己以前的疑问， 所以来记一下。</p><h2 id="Generic-的意义"><a href="#Generic-的意义" class="headerlink" title="Generic 的意义"></a>Generic 的意义</h2><p>在引入 Generic(泛型) 之前， 我们想要写一些抽象到 type 以上层级的代码的时候只能用 Object 类型去引用具体的实现类， 到需要使用的地方再 casting 回来。 这样有一个问题， 就是在类型方面出现问题的时候我们只能到 runtime 的时候才能发现问题被触发， debug 就很困难。</p><p>在引入了 Generic 之后， data type 也可以当做 parameter 来使用， 这样在 compile time 就可以发现类型方面的错误， 大大降低了出错的可能性， debug 也方便了许多。</p><h2 id="Generic-的使用"><a href="#Generic-的使用" class="headerlink" title="Generic 的使用"></a>Generic 的使用</h2><p>我们常在抽象到 type 以上的层面上使用泛型。 比如 sorting 的时候， sorting 的逻辑是共用的， 只有比较的部分才涉及到具体的 type。 我们在 container 中也常常使用泛型， 因为 container 的职能和其存放的元素是无关的。</p><p>泛型可以用在两个层面上， 一个是 Class 级别， 一个是 method 级别。 下面是简单的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Class level</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// method level</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K， V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(Pair&lt;K， V&gt; p1， Pair&lt;K， V&gt; p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.getKey().equals(p2.getKey()) &amp;&amp;</span><br><span class="line">           p1.getValue().equals(p2.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>type parameter 用 <code>&lt;&gt;</code> 包裹起来。 和其他 parameter 一样， parameter 可以在指定的 scope 内使用。 也是因为我们在使用的时候传入了具体的 type argument， compiler 得以帮助我们在 compile time 发现错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; sl = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>在 type inference 的帮助下， 我们在创建具体类的时候可以略去 type argument。</p><h2 id="Generic-的核心-Type-Erasure"><a href="#Generic-的核心-Type-Erasure" class="headerlink" title="Generic 的核心 Type Erasure"></a>Generic 的核心 Type Erasure</h2><p>如果仅仅是使用 Generic， 那么了解一下基本的语法就可以了。 因为我们大部分时间都是在使用库里提供好的 container。</p><p>但是要想避免一些常见的使用错误的话， 还是要对 type erasure 有所了解。 Type erasure 是 Java 实现 generic 的具体方法。 它的具体表现在以下几个方面</p><ul><li>把 generic type 中的 type parameters 替换为它们的 bounds 或者 Object</li><li>在必要的时候自动添加 type cast 去维护 type safety</li><li>生成 bridge method 去维护多态机能</li></ul><h3 id="替换-type-parameters"><a href="#替换-type-parameters" class="headerlink" title="替换 type parameters"></a>替换 type parameters</h3><p>先来看代码， 这是一个 Oracle Java tutorial 里的例子， 只是我把 method 的内容隐去了:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no bound</span></span><br><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data， Node&lt;T&gt; next)</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// has bound</span></span><br><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data， Node&lt;T&gt; next)</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经过 compiler 的辛勤工作后， 它们变成了这样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// no bounds</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">private</span> Object data;</span><br><span class="line">     <span class="keyword">private</span> Node next;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Object data， Node next)</span> </span>&#123;...&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;...&#125;;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// has bounds</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">private</span> Comparable data;</span><br><span class="line">     <span class="keyword">private</span> Node next;</span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Comparable data， Node next)</span> </span>&#123;...&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Comparable <span class="title">getData</span><span class="params">()</span> </span>&#123;...&#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>可见， 整体结构不变， 只是之前我们写 type parameter 的地方做了相应的替换。 利用多态的观点来想， 这样子替换之后， 程序是应当正确运行的。</p><h3 id="Bridge-Method"><a href="#Bridge-Method" class="headerlink" title="Bridge Method"></a>Bridge Method</h3><p>Type erasure 虽然帮助我们实现了 generic， 但是刚刚上面的 type parameter 替换也带来了问题。 来具体看一个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;T&gt; next;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(T data， Node&lt;T&gt; next)</span> </span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// caution! </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">MyNode</span> <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyNode</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// caution! not an override method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setData(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来用上面的两个 Class 做一些操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyNode mn = <span class="keyword">new</span> MyNode(<span class="number">5</span>);</span><br><span class="line">Node n = mn;  <span class="comment">// A raw type - unchecked warning</span></span><br><span class="line">n.setData(<span class="string">"Hello"</span>);</span><br><span class="line">Integer x = mn.data;  <span class="comment">// ClassCastException</span></span><br></pre></td></tr></table></figure><p>在执行最后一行会抛出异常， 为什么呢?</p><p>这就是 type erasure 的问题。 我们返回去看一下 <code>setData()</code> 这个 method， 想一想 type erasure 之后它成了什么样子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in Node， T -&gt; Object</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in MyNode</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setData(data);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>发现了吗? 原来的 type parameter 被替换成了 Object， 这可不好了， 因为两个 method 的 pattern 这下子不一样了， <code>MyNode</code> 中的 <code>setData</code> 并没有 Override <code>Node</code> 中的对应 method， 而是新建了一个 method。</p><p>所以在上面使用 <code>MyNode</code> 和 <code>Node</code> 的代码中， 我们通过 <code>n</code> 调用的 <code>setData</code> 是 <code>Node</code> 中的， 不然 String 是无法被存入的。 这就和我们平时熟悉的多态发生了冲突。</p><p>为了解决这个问题， type erasure 就在它的工作过程中添加了一个步骤。 在编译期， 如果一个 class 或 interface 继承/实现了 parameterized class 或 parameterized interface， 那么就自动生成 bridge methods 来让多态往常工作。 </p><p>注意， 只有继承或实现 parameterized class/interface 的时候才有。 (即， <code>Node&lt;Integer&gt;</code>， <code>List&lt;String&gt;</code> 这样有具体 type argument 的 class 或 interface)</p><p>Bridge method 长这个样子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNode</span> <span class="keyword">extends</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bridge method</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        setData((Integer) data);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Integer data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setData(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见， bridge method 和原来父类中的对应 method 的 pattern 是相同的， 这样就实现了 Override。 其内部调用了子类自己的对应 method， 只是在传 argument 的时候做了一个 casting， 这样子就保证了 type safety。 现在， 如果我们再像之前一样想向其中添加 String， compiler 就能报错了。</p><h2 id="Generic-的局限"><a href="#Generic-的局限" class="headerlink" title="Generic 的局限"></a>Generic 的局限</h2><p>Generic 的局限其实就是来源于 type erasure 的。 <a href="https://docs.oracle.com/javase/tutorial/java/generics/restrictions.html" target="_blank" rel="noopener">这里</a>有文档里具体给出的条目和例子。</p><p>简单的来说， compiler 在编译期间将关于 type parameter 和 type argument 的信息抹去， 那些 generic type 就成了 non-reifiable type (type 信息被 type erasure 抹去后， 在 runtime 期间 type 信息不完全)</p><p>比如像 <code>Node&lt;String&gt;</code> 和 <code>Node&lt;Number&gt;</code>， JVM 无法区分它们的不同， 继而发生了这样那样的问题。 比如不能创建 type parameter 的 instance 啊; 不能对 parameterized types 使用 <code>instanceof</code> 啦。 都是因为 type 信息不全导致的， 我不知道具体的 type 是什么， 怎么造对象， 怎么告诉你对象的类型信息嘛。 </p><p>大致上就是这个样子， 详细的内容还请阅读官方的文档和教程， 一定会更加详细和正确。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Generic </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是 lambda expression?</title>
      <link href="/2019/02/19/what-is-lambda-expression/"/>
      <url>/2019/02/19/what-is-lambda-expression/</url>
      
        <content type="html"><![CDATA[<h1 id="Lambda-Expression-是干嘛的"><a href="#Lambda-Expression-是干嘛的" class="headerlink" title="Lambda Expression 是干嘛的?"></a>Lambda Expression 是干嘛的?</h1><p>最近学习 Java 的时候在 Exercism 上做题。有一题，mentor 提醒我可以使用 Java Stream 去简化代码。查询了之后发现 Stream 是和 lambda expression 一起使用的。今天就把查到的内容记录一下。</p><p>学习资料参见官方的 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="noopener">Java Tutorials</a>。还可以看看 YouTube 上的<a href="https://www.youtube.com/watch?v=e4MT_OguDKg&amp;t=1983s" target="_blank" rel="noopener">这个视频</a>去了解一下 Lambda Expression 的魅力。</p><hr><h2 id="Nested-Class"><a href="#Nested-Class" class="headerlink" title="Nested Class"></a>Nested Class</h2><p>要谈 lambda expression，就先要来简单说一说 nested class。</p><p>Nested class 指的就是在其他 class 中声明的 class。Java 中的 nested class 可以分为那么几类：</p><ul><li>static nested class</li><li>non-static nested class (inner class)<ul><li>local nested class</li><li>anonymous nested class</li></ul></li></ul><p>它们的使用方法大致上来看和 top-level class 没有很大区别，就是先声明 class，创建 instance，然后通过创建出的 instance 来调用方法。Anonymous class 因为是一个 expression，在同一时间完成了 declaration 和 instantiate，相比之下减少一步。</p><p>Local nested class 和 anonymous class 相比 inner class 能在更小的 scope——block——中进行声明。</p><p>常常使用 anonymous class 的一个场景就是，一个 method 接收一个 object 为 parameter，因为这个 object 并不在其他地方使用，我们就直接在调用 method 的时候利用 anonymous class 创建一个 object。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Language</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Language language)</span> </span>&#123;</span><br><span class="line">        language.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sayHello(<span class="keyword">new</span> Language() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"English: Hello!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样子，在不改变其他结构的前提下，在调用修改 anonymous class 的实现就能说出不同语言的 Hello。效果虽好，还是有一些不尽人意之处。比如 anonymous class 是 interface 的具体实现或其他 class 的继承，那么我们就必须要定义 interface 或 class。再者，其可读性也很差，相信很多人和我一样，在头几次见到匿名类的时候根本就不懂这么写是什么意思。</p><p>Lambda expression 的出现就缓解了这些个问题。</p><h2 id="Lambda-Expression-和-Anonymous-Class"><a href="#Lambda-Expression-和-Anonymous-Class" class="headerlink" title="Lambda Expression 和 Anonymous Class"></a>Lambda Expression 和 Anonymous Class</h2><p>很多人说，lambda expression 的出现大大降低了 anonymous class 的使用频率。特别是在我们仅仅想要传递一个方法的时候，Lambda expression 可以让我们将一个功能当做方法参数来使用。</p><p>回看一下上面的代码，我们实际上只想使用 <code>Language</code> 中的 <code>say()</code> 这个方法，object 本身我们并不需要。在这种时候，连 anonymous class 都让人觉得比较繁杂，更别说像使用 named class 一样去定义 class，new 一个 instance 再将其传入使用的方式了。</p><p>还是上面的代码，让我们来看看如何使用 lambda expression 对代码进行再简化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Language</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(Language language)</span> </span>&#123;</span><br><span class="line">        language.say();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        sayHello(</span><br><span class="line">            () -&gt; System.out.println(<span class="string">"English: Hello!"</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在调用 <code>sayHello</code> 的时候使用了 lambda expression <code>() -&gt; System.out.println(&quot;English: Hello!&quot;)</code> 这简单的一行就实现了需求。可见，相对于匿名类我们的代码变得更加简洁，而且<strong>没有创建</strong>object。这打破了 Java OOP 中声明 class -&gt; 构造 instance -&gt; 通过 instance 调用方法的 pattern。</p><p>在 Java 8 之前，一切都是 object，就算我们只需要一个单独的方法，也只能依靠一个 object reference 去调用，而 lambda expression 的出现打破了这个限制。下一次，当你想要构建一个十分简单的匿名类，例如只是一个实现了 interface 中单个方法的情况时，就考虑用 lambda expression 来实现吧。</p><p>有一点需要注意的是，lambda expression 对外部 scope 的访问权限和 local class 和 anonymous class 是相似的，可以直接访问 enclosing class 的 member 和 final local variable。但是 lambda expression 在 local scope 中没有 <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html#shadowing" target="_blank" rel="noopener">shadowing</a> 的问题。即，它和它所在的 local scope 是同级的，variable name 不能重复。</p><h2 id="Lambda-Expression-具体是什么"><a href="#Lambda-Expression-具体是什么" class="headerlink" title="Lambda Expression 具体是什么?"></a>Lambda Expression 具体是什么?</h2><p>上面我们花了些时间引入 lambda expression，讲了它的优点，使用场景,写了简单的例子，但是还没有说明它到底是什么，为什么在原来写匿名类的地方换上那一句带箭头的 statement 就能等效运行。现在我们就来看一看。</p><p><code>sayHello()</code> 的 parameter 是一个 <code>Language</code> interface 的具体实现，而我们的 lambda expression 正好出现在了那个位置，说明它充当了那个角色。可是在那应该传入一个实现 interface 的 class 的 object，我们又说 lambda expression 没有创建 object，这又该怎么解释呢？</p><h3 id="Functional-Interface"><a href="#Functional-Interface" class="headerlink" title="Functional Interface"></a>Functional Interface</h3><p>Lambda expression 其实很简单，是 <em>functional interface</em> 的实现。  Functional interface 指的是只有一个 abstract method 的 interface。我们的 <code>Language</code> interface 正好就是这么一个 functional interface。</p><p>因为 functional interface 中只有一个 abstract method，不写明 method 的名字，编译器也知道我们在实现哪个方法，所以在我们的 lambda expression 中没有出现我们想要实现的方法的名字——<code>say</code>。</p><p>现在我们知道了 lambda expression 是什么，为什么它可以出现在之前代码的那个位置。接下来就来看一下它的语法。</p><h3 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h3><p>Lambda expression 以 <code>-&gt;</code> 分割左右，左侧为参数，右侧为方法的 body 部分。</p><p>参数由括号括起来，由逗号隔开，如果只有一个参数的话，可以省略括号。</p><p>方法 body 部分依据其情况分为两种写法。如果是 statement block 的话用大括号<code>{}</code>包起来；如果只是一个简单的 expression，就可以省略大括号。</p><p>我们之前的 lambda expression <code>() -&gt; System.out.println(&quot;English: Hello!&quot;)</code>，因为 <code>say()</code> 没有参数，所以参数括号内是空的，而右侧是简单的 expression，也就没用使用大括号。</p><h3 id="Standard-Functional-Interface"><a href="#Standard-Functional-Interface" class="headerlink" title="Standard Functional Interface"></a>Standard Functional Interface</h3><p>等等，如果每次用 lambda expression 都要写一个 functional interface，那好像用起来也不省事儿啊？别担心，设计者已经帮我们想过这个问题啦。</p><p>与 lambda expression 一同而来的，还有一个叫做 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="noopener"><code>java.util.founction</code></a> 的包，它给我们提供一些可以拿来即用的 interface。在使用 lambda expression 的时候，看看自己的表达式想要实现的方法和哪个 interface 的 abstract method 的 pattern 相吻合，在做方法的声明的时候就用那个 interface 做 parameter 就好了。</p><p>常用的 interface 有：</p><ul><li><code>Consumer&lt;T&gt;</code><ul><li>它的 method 是 <code>void accept(T t)</code>, 用来将特定的操作用到给入的 argument 上。</li></ul></li><li><code>Predicate&lt;T&gt;</code><ul><li>它的 method 是 <code>boolean test(T t)</code>, 看给入 argument 是否满足某种判定。</li></ul></li><li><code>Function&lt;R, T&gt;</code><ul><li>它的 method 是 <code>R apply(T t)</code>, 将这个 function 应用到给入的 argument 上, 并返回值。</li></ul></li></ul><p>假如我们想要写一个简单的方法，让它输出满足特定条件的书，就可以用 <code>Predicate</code> 这个 interface。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">printNum</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        Iterable&lt;T&gt; source,</span></span></span><br><span class="line"><span class="function"><span class="params">        Predicate&lt;T&gt; filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T n : source) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.test(n)) &#123;</span><br><span class="line">                System.out.print(<span class="string">""</span> + n + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print all numbers</span></span><br><span class="line">        printNum( numbers, e -&gt; <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print odd numbers</span></span><br><span class="line">        printNum(numbers, e -&gt; e % <span class="number">2</span> != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// print even numbers</span></span><br><span class="line">        printNum(numbers, e -&gt; e % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在不改变 <code>printNum</code> 的前提下，很轻松的就实现了对奇数和偶数的过滤输出。实际上，因为是 genetic method，实现了 <code>Iterable</code> 接口的对象我们都可以用这一个方法进行同样的过滤操作。如果使用原来 OOP 的方式来实现，要么写三个不同的 print 方法，要么创建一个新类去实现三个 filter，相对来说就要复杂许多了。</p><h3 id="Java-Stream-和-Functional-Programming"><a href="#Java-Stream-和-Functional-Programming" class="headerlink" title="Java Stream 和 Functional Programming"></a>Java Stream 和 Functional Programming</h3><p><code>java.util.stream</code> 向我们提供了一些叫做 <code>aggregate operation</code> 的东西，来帮助我们实现类 FP 的代码。</p><p>常见的 operation 有</p><ul><li><code>Stream&lt;E&gt; stream()</code><ul><li>将 object collection 转为 stream 流</li></ul></li><li><code>Stream&lt;T&gt; filter(Predicate&lt;? super T&gt; predicate)</code><ul><li>筛选符合 predicate 的 object</li></ul></li><li><code>&lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T,? extends R&gt; mapper)</code><ul><li>将 object 作为 function 的 input, 得到对应 output</li></ul></li><li><code>void forEach(Consumer&lt;? super T&gt; action)</code><ul><li>对 object 进行某种操作</li></ul></li></ul><p>在上面的 operation 的 parameter 里我们可以见到刚刚说到的几个 standard functional interface。所以可知，Aggregate operations 以 lambda expression 为 parameter，去实现那些 interface。也因具体实现的不同而产生不一样的效果。</p><p>Functional programming 中的 function 指的就是数学上的 function：给定一个 input，function 给出 output，没有状态记录。但是可以将各个 operation 连接形成 pipeline，以前歩的 output 作为后步的 input，从而得到我们最终想要的结果。</p><p>让我们结合 Stream，重写一下刚刚的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get odd numbers</span></span><br><span class="line">    numbers</span><br><span class="line">        .stream()</span><br><span class="line">        .filter(</span><br><span class="line">            e -&gt; e % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">        .forEach(</span><br><span class="line">            e -&gt; System.out.print(e + <span class="string">" "</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不需要再提前定义方法，直接利用 aggregate operations 就实现了对奇数的输出。</p><hr><p>对 lambda expression 的简单介绍就到这儿啦。写的内容很简单，一是因为个人水平不高，二是官方文档里有很详尽的内容。希望以后自己能多多利用新的特性。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Lambda Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queue</title>
      <link href="/2019/01/28/Queue/"/>
      <url>/2019/01/28/Queue/</url>
      
        <content type="html"><![CDATA[<h1 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h1><p><img src="https://i.loli.net/2019/01/28/5c4e8fc955e28.png" alt="queue"></p><p>常和 Stack 挽着手出现的朋友就是 <a href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)" target="_blank" rel="noopener">Queue</a> 了。 Queue 可以说正好和 Stack 的特质相反——Stack 是 LIFO，而 Queue 是 FIFO(First in first out) 先入先出，就和生活中的队列一样。</p><p>Stack 只在顶部的一侧进行操作，而 Queue 则一侧进，一侧出。入队的操作叫做 <code>enqueue</code>，出队的操作叫做<code>dequeue</code>。对于队列中间的元素，我们一般情况下是不关注的。</p><p>和之前谈到的 Stack 一样，只要满足特性，如何实现 Queue 都是可以的，User 不需要知道那些内容。但是不同的底层实现对操作的效率可能是有着极大的影响的。接下来我们用三种底层结构分别实现一下 Queu。</p><hr><h2 id="Simple-Array-Queue"><a href="#Simple-Array-Queue" class="headerlink" title="Simple Array Queue"></a>Simple Array Queue</h2><p>首先呢，是使用最简单的 Array 来实现。Array 可以用静态的，也可以用动态的。不过在我看来，如果使用 Array 来实现的话，可能还是使用静态的就足够了，如果需要动态结构，Linked List 可能会更合适一些。</p><h3 id="Operation-Complexity"><a href="#Operation-Complexity" class="headerlink" title="Operation Complexity"></a>Operation Complexity</h3><p>先来看一下常用操作的复杂度：</p><ul><li>enqueue: $O(1)$</li><li>dequeue: $O(n)$</li><li>getFirst: $O(1)$</li><li>getSize: $O(1)$</li><li>isEmpty: $O(1)$</li></ul><p>大多数的操作都很快，除了 <code>dequeue</code>。因为 <code>enqueue</code> 就是直接调用了 Array 的 <code>addLast</code> 操作，而 <code>dequeue</code> 是 <code>removeFirst</code>。在移除了第一个元素之后，还需要将其余的元素向前移动一次。</p><h3 id="实现-SimplyArrayQueue"><a href="#实现-SimplyArrayQueue" class="headerlink" title="实现 SimplyArrayQueue"></a>实现 SimplyArrayQueue</h3><p>为了方便，我们在这里先直接使用 Java 的 ArrayList，动态扩缩容的部分也就交给它，不用自己写了。如果不知道如何实现自己的动态数组，可以看<a href="/2019/01/08/Array/" title="这里">这里</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleArrayQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;E&gt; array;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(E item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.isEmpty();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>非常简单的实现，所有的操作都由底层的 Array 提供了，我们只是包装了新的 API 而已。</p><hr><h2 id="Circular-Array-Queue"><a href="#Circular-Array-Queue" class="headerlink" title="Circular Array Queue"></a>Circular Array Queue</h2><p>我们之前提到，单纯使用 Array 的操作的话，<code>dequeue</code> 的复杂度难尽人意。不过在依旧使用 Array 的前提下，我们也可以对其进行优化，实现一个<em>循环队列</em>。</p><p>循环队列，顾名思义，就是把线性的 Array 看做一个首尾相连的环，那么原来 Array 的头尾部的界限就消失了。可是，如果 Array 的头尾界限消失了，那如何来标识我们 Queue 的头尾呢？答案很简单，我们可以添加其他的变量来帮助我们记录队列的首尾。</p><p><img src="https://i.loli.net/2019/01/28/5c4e8fc97eabc.png" alt="circularqueue"></p><p>维护 <code>head</code> 和 <code>tail</code> 两个新的变量来记录队列首尾，继而可以直接对头尾进行操作。</p><h3 id="状态判定和头尾位置计算"><a href="#状态判定和头尾位置计算" class="headerlink" title="状态判定和头尾位置计算"></a>状态判定和头尾位置计算</h3><p>想要正确使用循环队列，我们就要维护好 <code>head</code> 和 <code>tail</code> 两个变量。维护的方法其实很直接，在 dequeue 和 enqueue 之后分别将 head 和 tail 后移一位。因为我们的环是一个首尾相接的 Array，当达到 Array 的尾部之后我们就得移动回 Array 的开头。</p><p>因为底层是 Array，我们直接使用其 index 来表示 head 和 tail。大家应该都想到了，使用简单的 mod 运算，我们就能得到正确的 index。有</p><ul><li><code>head = (head+1) % capacity</code></li><li><code>tail = (tail+1) % capacity</code></li></ul><p>得到了正确的 head 和 tail 我们就能判断队列的状态是空，还是满。<br><strong>空</strong>的时候 <code>head == tail</code>，因为一个元素都没有。但是<strong>满</strong>的时候如何判定呢？tail 指示的是下一个将要插入的元素的位置，当新进元素占用到最后一个空位时，head 和 tail 的值就相等。即，空 满 两个状态的判定条件重复了。</p><p>【满空图】</p><p>为了解决这个问题，我们可以添加一个空位，或者说浪费一个位置来将 head 和 tail 隔开。这样，空 满 状态的判定条件就分割开来了。即，<code>(tail + 1) % capacity == head</code> 时为满。</p><h3 id="Operation-Complexity-1"><a href="#Operation-Complexity-1" class="headerlink" title="Operation Complexity"></a>Operation Complexity</h3><ul><li>enqueue: $O(1)$</li><li>dequeue: $O(1)$</li><li>getFirst: $O(1)$</li><li>getSize: $O(1)$</li><li>isEmpty: $O(1)$</li></ul><p>循环队列的 <code>dequeue</code> 操作降到了最低。因为在删除了队首元素之后，我们不再把剩余的元素前移，而是简单的移动 <code>head</code> 去指向新的的头部元素。这样， Queue 就在我们 Array 做成的环中「循环」了起来。 </p><h3 id="实现-CircularArrayQueue"><a href="#实现-CircularArrayQueue" class="headerlink" title="实现 CircularArrayQueue"></a>实现 CircularArrayQueue</h3><p>有了以上的知识之后，我们就可以开始 coding 了。之前在 SimpleArrayQueue 部分我们使用了 Java 的 ArrayList，这次我们使用基本的 Array 来进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E[] array;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> head, tail;  <span class="comment">// queue head and tail indicator</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head == tail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(E item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((tail+<span class="number">1</span>) % array.length == head)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        array[tail] = item;</span><br><span class="line">        tail = (tail+<span class="number">1</span>) % array.length;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot dequeue from a empty queue."</span>);</span><br><span class="line"></span><br><span class="line">        E front = array[head];</span><br><span class="line">        array[head] = <span class="keyword">null</span>;  <span class="comment">// help free resources</span></span><br><span class="line">        head = (head+<span class="number">1</span>) % array.length;</span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Queue is empty."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> array[head];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="Linked-List-Queue"><a href="#Linked-List-Queue" class="headerlink" title="Linked List Queue"></a>Linked List Queue</h2><p><img src="https://i.loli.net/2019/01/28/5c4e8fc9816f8.png" alt="linkedlistQueue"></p><p>之前提到，我们也可以使用 Linked List 来实现 Queue，从而省去空间管理的操作。不同的 Linked List 可能会对某些操作的效率造成影响，下面就简单讨论一下。</p><h3 id="Operation-Complexity-2"><a href="#Operation-Complexity-2" class="headerlink" title="Operation Complexity"></a>Operation Complexity</h3><ul><li>enqueue: $O(1)$ 或 $O(n)$</li><li>dequeue: $O(1)$</li><li>getFirst: $O(1)$</li><li>getSize: $O(1)$</li><li>isEmpty: $O(1)$</li></ul><p><code>dequeue</code> 调用 Linked List 的 <code>removeFirst</code> 操作就可以实现。但是 <code>enqueue</code> 则根据底层 Linked List 的实现有着不同的效率。</p><p>有一些 Lined List 只维护了一个 head reference 或 pointer 去指向头部，因为 linked list 没有 random access 的能力，在插入时，只能遍历整个 list 去找到尾部，复杂度就成了 $O(n)$。如果 linked list 还维护了一个 tail 去指向尾部的话，那么复杂度就成了 $O(1)$。所以建议使用同时维护了 head 和 tail 两个 reference 的 linked list 来构建 Queue。</p><p>Linked list 的简单实现可以看。</p><h3 id="实现-LinkedListQueue"><a href="#实现-LinkedListQueue" class="headerlink" title="实现 LinkedListQueue"></a>实现 LinkedListQueue</h3><p>为了方便，直接使用 Java 库中的 LinkedList。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;E&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListQueue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        linkedList.addLast(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">dequeue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedList.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFront</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedList.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>Queue 的简单内容就到这里 ^^</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack</title>
      <link href="/2019/01/21/Stack/"/>
      <url>/2019/01/21/Stack/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h1><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fzef1fzzspj30d50753yl.jpg" alt="stack"></p><p><a href="https://en.wikipedia.org/wiki/Stack_(abstract_data_type)" target="_blank" rel="noopener">Stack</a> 是基本的数据结构之一。它不是某种特定的实现，而是指满足一定特定性质的 container，这个特性就是 LIFO（Last in first out): 后进先出。Stack 只能从单一的方向添加或删除元素，我们一般也只关心 Stack 顶部的元素。</p><p>Stack 作为一种线性结构的数据结构，其本身是十分简单的。但简单的 Stack 在计算机世界中是十分重要的。操作撤销，函数的调用等等都使用到了 Stack。</p><p>Stack 所支持的核心操作是 push 和 pop，所针对的位置是其顶部。基于此特质，一般都会选择使用 Array 来进行实现。基本的 <code>addLast</code> 和 <code>removeLast</code> 操作就可以实现一个 Stack。</p><h2 id="Stack-的简单实现-——-Array"><a href="#Stack-的简单实现-——-Array" class="headerlink" title="Stack 的简单实现 —— Array"></a>Stack 的简单实现 —— Array</h2><p>可以利用之前我们自己实现的 <a href="/2019/01/08/Array/" title="Array">Array</a> 或者各个语言中和其对应的结构来实现。比如 Python 和 JavaScript 的 list（其实两种语言中的 list 已经可以直接当做 stack 来使用了）。</p><p>Stack 常用的操作及其复杂度如下(使用 Dynamic Array 实现的前提下）：</p><ul><li>push: $O(1)$</li><li>pop: $O(1)$</li><li>top: $O(1)$</li><li>getSize: $O(1)$</li><li>isEmpty: $O(1)$</li></ul><p>这里为了方便，我们建立一个 interface，使用 Java 中的 ArrayList 来实现一个 Stack。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(E item)</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">E <span class="title">top</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// stack core operations</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ArrayList&lt;E&gt; array;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> ArrayList&lt;&gt;(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        array.add(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.remove(array.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array.get(array.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的代码看<a href="https://github.com/z1ggy-o/DataStructure-example/tree/master/Stack" target="_blank" rel="noopener">这里</a>。</p><h2 id="Linked-List-Stack"><a href="#Linked-List-Stack" class="headerlink" title="Linked List Stack"></a>Linked List Stack</h2><p>除了使用 Array 作底层结构，在不限制 Stack 大小的时候也可以选择使用 Linked List 来实现 Stack。这里，我们利用 Java 的 LinkedList 来实现一下。非常简洁，基本只使用了 <code>addFirst</code> 和 <code>removeFirst</code> 两个函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;E&gt; linkedList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedListStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        linkedList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">        linkedList.addFirst(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedList.removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> linkedList.getFirst();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想试试自己实现一个 Linked List，可以看。</p><h2 id="Stack-的简单应用"><a href="#Stack-的简单应用" class="headerlink" title="Stack 的简单应用"></a>Stack 的简单应用</h2><p>Stack 常用来做顺序记录和配对。学校里老师经常会用一个<code>括号配对</code>的题目来让大家练习 stack 的使用，这里我们也来做一做它。LeetCode 中的第 20 题 <a href="https://leetcode.com/problems/valid-parentheses/" target="_blank" rel="noopener">Valid Parentheses</a> 就是这样一个题目。</p><blockquote><p>Given a string containing just the characters ‘(‘, ‘)’, ‘{‘, ‘}’, ‘[‘ and ‘]’, determine if the input string is valid.</p><p>An input string is valid if:</p><p>Open brackets must be closed by the same type of brackets.Open brackets must be closed in the correct order.Note that an empty string is also considered valid.</p></blockquote><p>只要想到使用 stack，解题思路还是十分清晰的。我们从左至右遍历输入，将<em>左括号</em>放入 stack；在遇到<em>右括号</em>的时候去和 stack 顶部的括号进行配对。配对时有三种情况：</p><ul><li>当前右括号和 stack 顶部括号匹配，则将顶部左括号 pop 掉</li><li>左右括号不匹配，返回 false</li><li>遇到右括号时，stack 是空的，即由右括号开始，返回 false</li></ul><p>在所有的输入都遍历完之后，如果 stack 为空，则全部匹配正确，返回 true。</p><p>这里，提供一种简单的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">'('</span> || c == <span class="string">'['</span> || c == <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (stack.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">char</span> topChar = stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">')'</span> &amp;&amp; topChar != <span class="string">'('</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">']'</span> &amp;&amp; topChar != <span class="string">'['</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">'&#125;'</span> &amp;&amp; topChar != <span class="string">'&#123;'</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的实现方法有很多，但大体上的思路是相似的。Stack 就写那么多^^</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Hexo 和 Github Pages 搭建静态博客</title>
      <link href="/2019/01/12/%E5%88%A9%E7%94%A8%20Hexo%20%E5%92%8C%20Github%20Pages%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/12/%E5%88%A9%E7%94%A8%20Hexo%20%E5%92%8C%20Github%20Pages%20%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="利用-Hexo-和-Github-Pages-搭建静态博客"><a href="#利用-Hexo-和-Github-Pages-搭建静态博客" class="headerlink" title="利用 Hexo 和 Github Pages 搭建静态博客"></a>利用 Hexo 和 Github Pages 搭建静态博客</h1><p>以前跟着别人的教程用相似的工具搭建过博客，不过当时自己一点代码都不懂，博客也没怎么写就荒废了。最近决定再次把博客拾起来，就顺便记录一下简单的搭建过程。</p><p>这里只简单的写一写如何利用 Hexo 和 Github Pages 搭建最简单的博客，不涉及关联个人域名（我个人觉得没什么必要）。</p><h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>先来介绍一下 Github Pages 和 Hexo。</p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><p><a href="https://pages.github.com" target="_blank" rel="noopener">Github Pages</a> 是一个免费的静态网站 hosting 服务。</p><blockquote><p>GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p></blockquote><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p><a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> 是一个现在大家常用的博客框架。在 Hexo 的帮助下，我们可以只关注于博客文章的书写。如果你喜欢，还有很多的主题可以使用。</p><h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Github Pages 的搭建很简单，<a href="https://guides.github.com/features/pages/" target="_blank" rel="noopener">这里</a>是官方的文档，跟着做就好了。其实就是建立一个 repository，非常的便捷。<br>唯一要注意的是 repository 的名字一定要是 <code>username.github.io</code> 这样的格式。</p><p>Hexo 的使用相对复杂一些。首先，确认自己的机器已经安装了 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a> 和 <a href="https://git-scm.com" target="_blank" rel="noopener">Git</a>。Node.js 推荐使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a> 安装 LTS 版本的。非长期支持版本在安装 Hexo 的时候有一些依赖问题。</p><p>在 Hexo 官网的首页有一个 code block 示例了安装并开始 Hexo 的步骤，体现了它的简洁。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install hexo-cli -g  # 安装 Hexo</span><br><span class="line"><span class="meta">$</span> hexo init blog  # 初始化一个叫 blog 的 hexo project</span><br><span class="line"><span class="meta">$</span> cd blog</span><br><span class="line"><span class="meta">$</span> npm install  # 安装插件等</span><br><span class="line"><span class="meta">$</span> hexo server</span><br></pre></td></tr></table></figure><p>Hexo 的<a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a>非常的详细，而且还有中文的文档。在这里我就不做重复摘抄了。</p><h3 id="配置和管理"><a href="#配置和管理" class="headerlink" title="配置和管理"></a>配置和管理</h3><p>要将 Hexo 生成的站点推送到 Github Pages 只需要简单的配置一下 config 文件，安装 <code>hexo-deployer-git</code> 就好了。</p><p>在 Hexo 建立的项目文件夹根目录中有一个<code>_config.yml</code>文件。在此文件的最后的<code>delpoment</code>部分按照下面的信息进行填写。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repository: your.github.page.repo</span><br><span class="line">    branch: the branch you want to push</span><br></pre></td></tr></table></figure><p><code>type</code> 处填写 git，<code>repository</code>处填自己 github pages 所在的库的地址，<code>branch</code>处填想推送到的 branch 就好了。</p><p>Hexo 会把本地 <code>source</code> 文件中的 markdown 文件渲染之后推送到我们之前<code>deploy</code>内指定的地方。这就意味着我们是不用将 Hexo 博客项目本身一起放到 github 去的。有一些朋友建议直接在 github pages 所在的库新建一个分支来存放，我觉得挺不错的。</p><p>具体的 Hexo 命令在之前的文档中都有，这里就不再列举。要是觉得文字比较枯燥，其中还有视频教程，包括主题的使用和调整等等。简单来说，一篇新文的发布流程就是:</p><ol><li>新建 <code>hexo new []</code>，或者直接把写好的 md 文档放到 source 文件夹内的指定页面文件夹中。</li><li>预览 <code>hexo s</code>，在本地查看效果。</li><li>生成 <code>hexo g</code></li><li>推送 <code>hexo d</code></li></ol><h2 id="常见的小问题"><a href="#常见的小问题" class="headerlink" title="常见的小问题"></a>常见的小问题</h2><h3 id="Hexo-回车的渲染问题"><a href="#Hexo-回车的渲染问题" class="headerlink" title="Hexo 回车的渲染问题"></a>Hexo 回车的渲染问题</h3><p>我们在书写 markdown 的时候，一般单个回车只是在文档内视觉上的将句子断行，实际渲染出的结果是不断行的，两个 space 才是强制断行。但是 Hexo 将 md 文件转成 HTML 文件时，会默认把 md 文件中的单个回车也当做换行，这样在书写上就很不方便了。</p><p>不过没关系，只需要修改<code>_config.yml</code>文件就能解决这个问题。Hexo 默认是使用 <code>hexo-renderer-marked</code>来渲染 md 文件的。我们只需要在 config 文件夹中加入以下设置即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">marked:</span><br><span class="line">    gfm: true</span><br><span class="line">    breaks: false</span><br></pre></td></tr></table></figure><p>这个插件内还有其他的配置选项，具体的内容请参见其<a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener">文档</a>。</p><h3 id="使用-Latex-书写数学公式"><a href="#使用-Latex-书写数学公式" class="headerlink" title="使用 Latex 书写数学公式"></a>使用 Latex 书写数学公式</h3><p>一般大家会使用 <a href="https://www.mathjax.org/" target="_blank" rel="noopener">MathJax</a> 来渲染 Latex 语句。在 Hexo 中，我们可以安装插件 <code>hexo-renderer-mathjax</code> 来实现渲染。有些主题可能已经默认支持了 MathJax，大家查看一下自己使用的主题文档来了解。</p><p>首先，因为 <code>hexo-renderer-mathjax</code> 太久没更新，我们要修改一下其中 MathJax 的地址。在 <code>node_modules/hexo-render-mathjax/mathjax.html</code> 中将最后的 script 地址改为<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这时候尝试书写 Latex 语句，渲染结果很有可能是错的。因为 Hexo 先利用 <code>marked.js</code> 对 md 文件进行渲染之后再利用 <code>mathjax.js</code> 进行渲染，Latex 语句中的某些符号被当做 markdown 符号被处理了。比如<code>_</code> 和 <code>\</code>。</p><p>要输出正确的结果，要么修改插件代码，要么修改文档的书写。如果我们想要把同一文档放到其他地方去发布，修改文档内容的方式自然显得繁杂。所以这里，我选择修改插件代码。</p><p>有些人推荐使用 <code>hexo-renderer-kramed</code> 开替代 <code>hexo-renderer-marked</code>，但我发现 kramed 已经很久没更新了，而 marked 在渲染上好像也没有问题，所以依旧使用 marked。我们需要修改两个转义规则</p><ul><li>去除对<code>\</code>的额外转义</li><li>将 markdown 中<code>_</code>表示强调的部分去除。</li></ul><p>去除<code>\</code>额外转义可以让 Latex 语句通用，不用写作<code>\\</code>；<code>_</code> 被 Latex 使用，而 markdown 本身还有<code>*</code>来表示强调，所以它可以被解放出来。</p><p>在 <code>nodes_modules/marked/lib/marked.js</code> 文件中搜索关键词 <code>inline</code>。我们能看到一些 inline-level grammar，我们需修改其中的 <code>escape</code> 和 <code>em</code> 两项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原规则 escape: /^\\([\\`*&#123;&#125;\[\]()#+\-.!_&gt;])/,</span></span><br><span class="line">  <span class="built_in">escape</span>: <span class="regexp">/^\\([`*&#123;&#125;\[\]()#+\-.!_&gt;])/</span>,</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 原规则 em: /^_([^\s_](?:[^_]|__)+?[^\s_])_\b|^\*((?:\*\*|[^*])+?)\*(?!\*)/,</span></span><br><span class="line">  em: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span>,</span><br></pre></td></tr></table></figure><p>最后，在<code>_config.yml</code> 用一下配置开启 MathJax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure><p>这样子，我们在不修改常用 Latex 语句的前提下就可以正常的渲染了。有些博客中还提到需要在文章开头指定使用 mathjax</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">date: </span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line"></span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>但是我尝试过，没有指定的时候也可以正常渲染。如果不行的话，可以尝试添加一下。</p><h3 id="本地预览和推送后的结果不同"><a href="#本地预览和推送后的结果不同" class="headerlink" title="本地预览和推送后的结果不同"></a>本地预览和推送后的结果不同</h3><p>有些时候本地预览的结果和推送到站之后的显示结果不同。首先确定一下自己在推送之前有没有用 <code>generate</code> 命令进行生成。如果确实生成了，但结果不同，则可以使用 <code>hexo clean</code> 清空之后再次生成，一般都可以解决问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array</title>
      <link href="/2019/01/08/Array/"/>
      <url>/2019/01/08/Array/</url>
      
        <content type="html"><![CDATA[<h1 id="数组-Array"><a href="#数组-Array" class="headerlink" title="数组 Array"></a>数组 Array</h1><h2 id="Basic-Array"><a href="#Basic-Array" class="headerlink" title="Basic Array"></a>Basic Array</h2><p>Array 可能是我们最先接触到的数据结构。Array 是非常简单的线性存储结构，所谓的 multi-dimensional array 的实际形态也是线性的。</p><p>在使用 array 的时候，我们就是向系统索取了一定量的连续内存空间。在 C 语言中，声明数组之后得到的就是第一个内存地址。 对内存空间之内的内容我们都可以直接的进行各类操作。 所以数组的优点就是对于数组内的任意位置进行直接操作。</p><p>由此，我们可以得到几个常见 array 操作的复杂度：</p><ul><li>Add First: $O(n)$. 在向头部添加元素时，要将原来的已有的每一个元素向后位移。</li><li>Add Last: $O(1)$. 直接的尾部添加元素，没有其他的操作需求。</li><li>Add in given index: $O(n)$. 不能确定添加的位置，期望上来说需要复制移动的元素数量是$n/2$。</li><li>Delete First: $O(n)$. 需要将剩余的元素向前位移。</li><li>Delete Last: $O(1)$. 直接删除最后一位元素。</li><li>Delete given index: $O(n)$. 需要将指定 index 右侧的元素左移一位。</li><li>Get value of given index: $O(1)$. Random access 是 Array 的长处。</li><li>Get index of given value: $O(n)$. 需要挨个对比。</li></ul><h2 id="Dynamic-Array"><a href="#Dynamic-Array" class="headerlink" title="Dynamic Array"></a>Dynamic Array</h2><p>因为 array 的空间大小是提前指定的，其大小就制约了我们对数组的使用。为了应对这个问题，我们可以建立一个动态数组，让它根据数组内元素数量的变动自己对内存空间进行伸缩。</p><p>在进行空间调整的时候也十分简单：</p><ol><li>按照我们的需求，索取一个新的 array</li><li>将原 array 中的元素复制到新的 array 中去</li><li>将原 array 的空间释放</li></ol><p>我们将这个过程作成一个 <code>resize</code> 的函数，然后添加到其他对 array 进行操作的函数中就可以了。</p><p>因为 <code>resize</code> 要复制 array 中的元素，所以其复杂度为 $O(n)$。但根据空间调整的临界值和新空间的大小，实际使用时的复杂度会有很大的不同。</p><p>首先，不建议将新添加或缩小的空间值定为一个常量。因为我们不知道 array 本身的 size 有多大，一个常量对于原本的 size 来说很可能是不实用的。比如，array 有 10,000 个元素，我们 resize 的时候每次只增加 10个位置，那么我们就可能经常需要进行 <code>resize</code>，其效率就大打折扣。</p><p>通常新空间的大小会是原空间大小的倍数。假设我们设定：</p><ul><li>当 array 满时，大小扩充为现在大小的 2 倍</li><li>当 array 的元素数量小于空间的 1/4 时，大小缩小为现在的 1/2</li></ul><p>这么设定有两个好处。第一，空间大小的变化和现有元素的实际数量有了相关性，这样会让 <code>resize</code> 的实际复杂度降低许多。假如初始空间大小 capacity 是 10，我们要连续进行 11 次的 <code>add first</code> 的操作才需要一次 <code>resize</code>。平均下来 <code>resize</code> 的复杂度就均摊到了 <code>add first</code> 中，成了$O(1)$.</p><p>第二，增加和缩减 capacity 的临界值不同，避免复杂度震荡。想象一下，如果 array 在元素数量小于 capacity的 1/2 的时候就进行空间调整的话，万一在临界值处重复进行 <code>add</code> 和 <code>delete</code>， 我们就会不断的进行<code>resize</code> 操作，整个复杂度就大大提高了。</p><p>数组的内容并不复杂，这里是一些简单的<a href="https://github.com/z1ggy-o/DataStructure-example/tree/master/Array" target="_blank" rel="noopener">示例代码</a>,实现了一些很基本的操作。</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data Structure </tag>
            
            <tag> Array </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
