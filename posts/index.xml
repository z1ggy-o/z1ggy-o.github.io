<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Gy's Blog</title><link>https://z1ggy-o.github.io/posts/</link><description>Recent content on Gy's Blog</description><generator>Hugo -- 0.140.1</generator><language>en-us</language><atom:link href="https://z1ggy-o.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>LevelDB 源码分析笔记</title><link>https://z1ggy-o.github.io/posts/leveldb-analysis/</link><pubDate>Mon, 22 Aug 2022 13:30:19 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/leveldb-analysis/</guid><description>&lt;p>最近一周花了些时间阅读了 LevelDB 的代码，了解一下 LSM-Tree 的具体实现。在阅读的过程中简略的记录了一些笔记，放在了我的 &lt;a href="https://github.com/z1ggy-o/LevelDB-Notes/tree/main/Notes">Github repo&lt;/a> 里。笔记是用蹩脚英语写的，也没有做任何的插图，建议配合&lt;a href="https://leveldb-handbook.readthedocs.io/zh/latest/basic.html">此分析文档&lt;/a>一起食用。&lt;/p></description></item><item><title>幻读，到底是怎么一回事儿</title><link>https://z1ggy-o.github.io/posts/isolation-levels-and-phtantom/</link><pubDate>Thu, 12 May 2022 07:11:54 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/isolation-levels-and-phtantom/</guid><description>&lt;p>幻读 (phantom phenomenon) 是数据库使用中经常提到的一个问题。一个常见的面试问题就是：某个数据库，在某个 isolation level 下，会不会出现幻读，以及其解决方法。&lt;/p>
&lt;p>网上有许多关于幻读的文章，但是在读完之后发现，大多数的说明都浮于表面，好像作者们自己也并没有弄清楚幻读的本质。在本文中，我想利用数据库的一些高层抽象概念，来阐述幻读的本质。虽然不涉及任何的具体实现，但相信你在了解到这些概念之后，可以很快地理解幻读，以及各种幻读的处理方法。&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#4</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445-project04/</link><pubDate>Mon, 09 May 2022 14:54:38 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445-project04/</guid><description>&lt;p>We are implementing a lock-based concurrency control scheme in this project. More specifically, the &lt;strong>strict two phase locking protocol&lt;/strong>.&lt;/p>
&lt;p>The concept is not that hard. However, there are many implementation details we need to care about. Especially, sometimes we need to guess what is the test code wants.&lt;/p>
&lt;p>You need to read the source code carefully. The instruction of this project is kind vague, or even wrong.&lt;/p>
&lt;h2 id="task-1---lock-manager">Task 1 - Lock Manager&lt;/h2>
&lt;p>Read &lt;code>transaction.h&lt;/code>, &lt;code>transaction_manager.h&lt;/code>, and &lt;code>log_manager.h&lt;/code> to learn the APIs first.&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#3</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445-project03/</link><pubDate>Sat, 30 Apr 2022 12:37:56 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445-project03/</guid><description>&lt;p>In this project, we will Implement &lt;strong>executors&lt;/strong> for taking query plan nodes and executing them.&lt;/p>
&lt;p>We are using the iterator query processing model (i.e., the Volcano model). Each executor implements a loop that continues calling &lt;code>Next&lt;/code> on its children to retrieve tuples and process them one-by-one.&lt;/p>
&lt;h2 id="how-executor-works">How &lt;code>executor&lt;/code> works&lt;/h2>
&lt;p>Before start coding, we need to learn a lot from the related source code first. The instruction does not show all the details and I believe they did this intentionally.&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#2</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445_project2/</link><pubDate>Sat, 19 Mar 2022 15:58:46 +0800</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445_project2/</guid><description>&lt;blockquote>
&lt;p>Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&amp;rsquo;t think that would be very different from public the source code.&lt;/p>
&lt;/blockquote>
&lt;h2 id="task-1---page-layouts">Task #1 - Page Layouts&lt;/h2>
&lt;p>Because we want to persist the hash table instead of rebuild it every time, we need to design the layout that we use to store the hash table in the disks.&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#1</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445_project1/</link><pubDate>Mon, 14 Mar 2022 21:23:00 +0800</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445_project1/</guid><description>&lt;blockquote>
&lt;p>Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&amp;rsquo;t think that would be very different from public the source code.&lt;/p>
&lt;/blockquote>
&lt;h2 id="task-1---lru-replacement-policy">Task #1 - LRU Replacement Policy&lt;/h2>
&lt;p>&lt;code>BufferPoolManger&lt;/code> contains all the frames.
&lt;code>LRUReplacer&lt;/code> is an implementation of the &lt;code>Replacer&lt;/code> and it helps &lt;code>BufferPoolManger&lt;/code> to manage these frames.&lt;/p></description></item><item><title>2PC v.s. 3PC: 一句话的总结</title><link>https://z1ggy-o.github.io/posts/2pc-vs-3pc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/2pc-vs-3pc/</guid><description>&lt;p>最近在准备面试的过程中看到有这样一个问题，就是让比较一下 2PC 和 3PC。在网上找了一些文章来读，感觉都没有十分简洁地说明两者之间最基本的区别点。所以，在这里写一篇小文，表达一下自己对 2PC，3PC 最核心区别的理解。&lt;/p>
&lt;p>最重要的最先说，在我看来两者的核心区别在于：&lt;strong>参与者间是否对 transaction commit/abort 建立了共识&lt;/strong>。3PC 的参与者之间对 commit 的成立是具有共识的，2PC 则没有。&lt;/p>
&lt;h2 id="3pc-相比-2pc-带来了什么">3PC 相比 2PC 带来了什么？&lt;/h2>
&lt;p>大家都知道，3PC 相比于 2PC 来说多了两个东西：&lt;/p>
&lt;ol>
&lt;li>增加了 time out&lt;/li>
&lt;li>commit phase 被分割为了 prepare commit 和 do commit 两个部分&lt;/li>
&lt;/ol>
&lt;p>增加一个 prepare commit phase 带来了什么呢？是集群对 commit 这一决定的共识。&lt;/p>
&lt;p>在 2PC 协议中，协调者单方面向参与者发送一次 commit 消息。这个消息有两个含义：&lt;/p>
&lt;ol>
&lt;li>让参与者进行 commit&lt;/li>
&lt;li>所有参与者都认可此 commit&lt;/li>
&lt;/ol>
&lt;p>但需要注意的是，对于一个 transaction，是 commit 还是 abort 这个决定本身只有协调者知道。一旦协调者故障，这部分信息就消失了。所以我们说 2PC 的协调者是单点故障点。&lt;/p>
&lt;p>3PC 协议中，prepare commit 消息让一个 transaction 该 commit 还是 abort 这个决定本身被传导到了所有参与者处。如此一来，如果协调者故障，参与者们可以根据 prepare commit 的情况继续工作。&lt;/p></description></item></channel></rss>