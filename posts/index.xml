<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - ziggy&#39;s brain dump</title>
        <link>https://example.com/posts/</link>
        <description>All Posts | ziggy&#39;s brain dump</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 19 Mar 2022 15:58:46 &#43;0800</lastBuildDate><atom:link href="https://example.com/posts/" rel="self" type="application/rss+xml" /><item>
    <title>CMU 15-445 2021 Fall Project#2</title>
    <link>https://example.com/cmu15445_project2/</link>
    <pubDate>Sat, 19 Mar 2022 15:58:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/cmu15445_project2/</guid>
    <description><![CDATA[Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&rsquo;t think that would be very different from public the source code.
 Task #1 - Page Layouts Because we want to persist the hash table instead of rebuild it everytime, we need to design the layout that we use to store the hash table in the disks.]]></description>
</item><item>
    <title>CMU 15-445 2021 Fall Project#1</title>
    <link>https://example.com/cmu15445_project1/</link>
    <pubDate>Mon, 14 Mar 2022 21:23:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/cmu15445_project1/</guid>
    <description><![CDATA[Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&rsquo;t think that would be very different from public the source code.
 Task #1 - LRU Replacement Policy BufferPoolManger contains all the frames. LRUReplacer is an implementation of the Replacer and it helps BufferPoolManger to manage these frames.]]></description>
</item><item>
    <title>File Systems Unift as Distributed Storage Backends: Lessons from 10 Years of Ceph Evolution</title>
    <link>https://example.com/aghayev-2019-filesystemunfit/</link>
    <pubDate>Sun, 17 Jan 2021 00:29:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://example.com/aghayev-2019-filesystemunfit/</guid>
    <description><![CDATA[Short Summary This paper mostly consists of two parts. The first part tells us why the FileStore has performance issues. And the second part tells us how Ceph team build BlueStore based on the lessons that they learnt from FileStore.
The main ideas of BlueStore are:
 Avoid using local file system to store and represent Ceph objects Use KV-store to provide transaction mechanism instead of build it by ourself  What&rsquo;s the problem There is a software called storage backend in Ceph.]]></description>
</item><item>
    <title>BCW: Buffer-Controlled Writes to HDDs for SSD-HDD Hybrid Storage Server</title>
    <link>https://example.com/wang-2020-bcw/</link>
    <pubDate>Thu, 31 Dec 2020 22:37:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://example.com/wang-2020-bcw/</guid>
    <description><![CDATA[Short Summary HDDs are under utilized in hybrid cloud storage systems which makes SSD to handle most of the requests. This shorts the life of SSDs and also wasts the utilization of HDDs.
The authors of this paper find that the write requets can have $Î¼$s-level latency when using HDD if the buffer in HDD is not full. They leverage this finding to let HDD to handle write requests if the requests can fit into the in disk buffer.]]></description>
</item><item>
    <title>Read as Needed: Building WiSER, a Flash-Optimized Search Engine</title>
    <link>https://example.com/he-2020-readasneeded/</link>
    <pubDate>Sat, 26 Dec 2020 20:15:00 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://example.com/he-2020-readasneeded/</guid>
    <description><![CDATA[Short Summary This paper proposed a NAND-flash SSD-friendly full text engine. This engine can achieve better performance than existing engines with much less memory requestsed.
They reduce the unnecessary I/O (both the number of I/O and the volume). The engine does not cache data into memory, instead, read data every time when query arrive.
They also tried to increase the request size to exploit SSD internal parallelism.
What Is the Problem Search engines pose great challenges to storage systems:]]></description>
</item><item>
    <title>My First Post</title>
    <link>https://example.com/my-first-post/</link>
    <pubDate>Sun, 08 Nov 2020 09:48:14 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://example.com/my-first-post/</guid>
    <description><![CDATA[I rebuilt my personal blog by using hugo.
I have cleaned all my old blogs (not so much actually).
I will write something related to my research reading or personal learning. Hope I can meet you soon.]]></description>
</item></channel>
</rss>
