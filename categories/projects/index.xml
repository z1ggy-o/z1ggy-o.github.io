<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>projects - Category - ziggy&#39;s brain dump</title>
        <link>https://example.com/categories/projects/</link>
        <description>projects - Category - ziggy&#39;s brain dump</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 19 Mar 2022 15:58:46 &#43;0800</lastBuildDate><atom:link href="https://example.com/categories/projects/" rel="self" type="application/rss+xml" /><item>
    <title>CMU 15-445 2021 Fall Project#2</title>
    <link>https://example.com/cmu15445_project2/</link>
    <pubDate>Sat, 19 Mar 2022 15:58:46 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/cmu15445_project2/</guid>
    <description><![CDATA[Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&rsquo;t think that would be very different from public the source code.
 Task #1 - Page Layouts Because we want to persist the hash table instead of rebuild it everytime, we need to design the layout that we use to store the hash table in the disks.]]></description>
</item><item>
    <title>CMU 15-445 2021 Fall Project#1</title>
    <link>https://example.com/cmu15445_project1/</link>
    <pubDate>Mon, 14 Mar 2022 21:23:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://example.com/cmu15445_project1/</guid>
    <description><![CDATA[Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&rsquo;t think that would be very different from public the source code.
 Task #1 - LRU Replacement Policy BufferPoolManger contains all the frames. LRUReplacer is an implementation of the Replacer and it helps BufferPoolManger to manage these frames.]]></description>
</item></channel>
</rss>
