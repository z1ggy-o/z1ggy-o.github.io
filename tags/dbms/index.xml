<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DBMS on Gy's Blog</title><link>https://z1ggy-o.github.io/tags/dbms/</link><description>Recent content in DBMS on Gy's Blog</description><generator>Hugo -- 0.140.2</generator><language>en-us</language><lastBuildDate>Sat, 28 Dec 2024 17:15:56 +0800</lastBuildDate><atom:link href="https://z1ggy-o.github.io/tags/dbms/index.xml" rel="self" type="application/rss+xml"/><item><title>LevelDB 源码分析笔记</title><link>https://z1ggy-o.github.io/posts/leveldb-analysis/</link><pubDate>Mon, 22 Aug 2022 13:30:19 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/leveldb-analysis/</guid><description>&lt;p>最近一周花了些时间阅读了 LevelDB 的代码，了解一下 LSM-Tree 的具体实现。在阅读的过程中简略的记录了一些笔记，放在了我的 &lt;a href="https://github.com/z1ggy-o/LevelDB-Notes/tree/main/Notes">Github repo&lt;/a> 里。笔记是用蹩脚英语写的，也没有做任何的插图，建议配合&lt;a href="https://leveldb-handbook.readthedocs.io/zh/latest/basic.html">此分析文档&lt;/a>一起食用。&lt;/p></description></item><item><title>VLDB'17 - An empirical evaluation of in-memory multi-version concurrency control</title><link>https://z1ggy-o.github.io/papers/wu-2017-empiricalevaluationinmemory/</link><pubDate>Fri, 01 Jul 2022 12:36:05 +0000</pubDate><guid>https://z1ggy-o.github.io/papers/wu-2017-empiricalevaluationinmemory/</guid><description>&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;ul>
&lt;li>MVCC is the most popular scheme used in DBMSs developed in the last decade. However, there is no standards about how to implement MVCC.&lt;/li>
&lt;li>Many DBMSs tell people that they use MVCC and how they implement it. There are several design choices people need to make, however, no one tells why they choose such way to implement their MVCC.&lt;/li>
&lt;li>This paper gives a comprehensive evaluation about MVCC in main memory DBMSs and shows the trade-offs of different design choices.&lt;/li>
&lt;/ul>
&lt;h2 id="contribution">Contribution&lt;/h2>
&lt;ul>
&lt;li>A good introduction about MVCC.&lt;/li>
&lt;li>Evaluation about how concurrency control protocol, version storage, garbage collection, and index management affect performance on a real in-memory DBMS.&lt;/li>
&lt;li>Evaluation of different configurations that used by main stream DBMSs.&lt;/li>
&lt;li>Advisings about how to achieve higher scalability.&lt;/li>
&lt;/ul>
&lt;h2 id="solution">Solution&lt;/h2>
&lt;ul>
&lt;li>This is an evaluation paper. There is no &amp;ldquo;solution&amp;rdquo; but evaluation analyses.&lt;/li>
&lt;li>People mainly focus on concurrency control protocols when they talk about scalability. However, the evaluation results show that the version storage scheme is also one of the most important components to scaling an in-memory MVCC DBMS in a multi-core environment.&lt;/li>
&lt;li>Delta storage scheme is good for write-intensive workloads especially only a subset of the attributes is modified. However, delta storage can have slow performance on read-heavy analytical workloads because it spends more time on traversing version chains.&lt;/li>
&lt;li>Most DBMSs choose to use tuple-level GC. However, the evaluation result shows that transaction-level can provide higher performance (at least in main memory DBMS) because it has smaller memory footprint.&lt;/li>
&lt;li>In terms of index management, logical pointer is always a better choice than physical pointers.&lt;/li>
&lt;li>The design choices that Oracle/MySQL and NuoDB made seems have the best performance.&lt;/li>
&lt;/ul>
&lt;h2 id="evaluation">Evaluation&lt;/h2>
&lt;ul>
&lt;li>They uses a DBMS implemented in CMU, called Peloton.&lt;/li>
&lt;li>The evaluation platform has 40 cores with 128 GB memory.&lt;/li>
&lt;li>Workloads are YCSB and TPC-C (both OLTP)&lt;/li>
&lt;/ul>
&lt;h2 id="the-main-finding-of-this-paper">The main finding of this paper&lt;/h2>
&lt;ul>
&lt;li>If you want to learn MVCC, read this one.&lt;/li>
&lt;li>Still, &amp;ldquo;Measure, Then build&amp;rdquo;.&lt;/li>
&lt;/ul></description></item><item><title>VLDB'14 - Staring into the abyss: An evaluation of concurrency control with one thousand cores</title><link>https://z1ggy-o.github.io/papers/yu-2014-staringabyssevaluation/</link><pubDate>Fri, 01 Jul 2022 12:21:38 +0000</pubDate><guid>https://z1ggy-o.github.io/papers/yu-2014-staringabyssevaluation/</guid><description>&lt;h2 id="motivation">Motivation&lt;/h2>
&lt;p>We are moving to the many-core architecture era, however, many design of database systems are still based on optimizing of single-threaded performance.&lt;/p>
&lt;p>To understand how to design high performance DBMS for the future many-core architecture to achieve high scalability, addressing bottlenecks in the system is necessary.&lt;/p>
&lt;p>This paper focus on concurrency control schemes.
(spoiler: the [following research]([[@An empirical evaluation of in-memory multi-version concurrency control]]) of [[Andrew Pavlo]] found out concurrency control schemes are not the most important component that affect the scalability of main memory DBMS on many-core environment )&lt;/p></description></item><item><title>幻读，到底是怎么一回事儿</title><link>https://z1ggy-o.github.io/posts/isolation-levels-and-phtantom/</link><pubDate>Thu, 12 May 2022 07:11:54 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/isolation-levels-and-phtantom/</guid><description>&lt;p>幻读 (phantom phenomenon) 是数据库使用中经常提到的一个问题。一个常见的面试问题就是：某个数据库，在某个 isolation level 下，会不会出现幻读，以及其解决方法。&lt;/p>
&lt;p>网上有许多关于幻读的文章，但是在读完之后发现，大多数的说明都浮于表面，好像作者们自己也并没有弄清楚幻读的本质。在本文中，我想利用数据库的一些高层抽象概念，来阐述幻读的本质。虽然不涉及任何的具体实现，但相信你在了解到这些概念之后，可以很快地理解幻读，以及各种幻读的处理方法。&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#4</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445-project04/</link><pubDate>Mon, 09 May 2022 14:54:38 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445-project04/</guid><description>&lt;p>We are implementing a lock-based concurrency control scheme in this project. More specifically, the &lt;strong>strict two phase locking protocol&lt;/strong>.&lt;/p>
&lt;p>The concept is not that hard. However, there are many implementation details we need to care about. Especially, sometimes we need to guess what is the test code wants.&lt;/p>
&lt;p>You need to read the source code carefully. The instruction of this project is kind vague, or even wrong.&lt;/p>
&lt;h2 id="task-1---lock-manager">Task 1 - Lock Manager&lt;/h2>
&lt;p>Read &lt;code>transaction.h&lt;/code>, &lt;code>transaction_manager.h&lt;/code>, and &lt;code>log_manager.h&lt;/code> to learn the APIs first.&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#3</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445-project03/</link><pubDate>Sat, 30 Apr 2022 12:37:56 +0000</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445-project03/</guid><description>&lt;p>In this project, we will Implement &lt;strong>executors&lt;/strong> for taking query plan nodes and executing them.&lt;/p>
&lt;p>We are using the iterator query processing model (i.e., the Volcano model). Each executor implements a loop that continues calling &lt;code>Next&lt;/code> on its children to retrieve tuples and process them one-by-one.&lt;/p>
&lt;h2 id="how-executor-works">How &lt;code>executor&lt;/code> works&lt;/h2>
&lt;p>Before start coding, we need to learn a lot from the related source code first. The instruction does not show all the details and I believe they did this intentionally.&lt;/p></description></item><item><title>CMU 15-445 2021 Fall Project#1</title><link>https://z1ggy-o.github.io/posts/projects/cmu15445_project1/</link><pubDate>Mon, 14 Mar 2022 21:23:00 +0800</pubDate><guid>https://z1ggy-o.github.io/posts/projects/cmu15445_project1/</guid><description>&lt;blockquote>
&lt;p>Because the course asks us to not sharing source code, here, I will only jot down some hits to help you (or maybe only me, kk) to finish the project. I will not even describe the process of any specific function, because I don&amp;rsquo;t think that would be very different from public the source code.&lt;/p>
&lt;/blockquote>
&lt;h2 id="task-1---lru-replacement-policy">Task #1 - LRU Replacement Policy&lt;/h2>
&lt;p>&lt;code>BufferPoolManger&lt;/code> contains all the frames.
&lt;code>LRUReplacer&lt;/code> is an implementation of the &lt;code>Replacer&lt;/code> and it helps &lt;code>BufferPoolManger&lt;/code> to manage these frames.&lt;/p></description></item></channel></rss>